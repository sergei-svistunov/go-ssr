// Code generated by goyacc -o texty.go -v texty.output text.y. DO NOT EDIT.

//line text.y:2
package template

import (
	__yyfmt__ "fmt"
	"github.com/sergei-svistunov/go-ssr/internal/generator/route/template/node"
)

//line text.y:10
type yySymType struct {
	yys                 int
	string              string
	Node                node.Node
	NodeContent         *node.Content
	NodeExpressionsList *node.ExpressionsList
}

const TEXT = 57346
const EXPR_START = 57347
const EXPR_END = 57348
const RAW_EXPR_START = 57349
const IDENTIFIER = 57350
const STRING = 57351
const NUMBER = 57352
const IN = 57353
const EQ = 57354
const NE = 57355
const GE = 57356
const LE = 57357
const OR = 57358
const AND = 57359
const NOT = 57360

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TEXT",
	"EXPR_START",
	"EXPR_END",
	"RAW_EXPR_START",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"IN",
	"EQ",
	"NE",
	"GE",
	"LE",
	"OR",
	"AND",
	"NOT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'>'",
	"'<'",
	"'?'",
	"':'",
	"'('",
	"')'",
	"'.'",
	"'['",
	"']'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line text.y:71

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 247

var yyAct = [...]int8{
	7, 71, 63, 68, 57, 16, 18, 69, 59, 6,
	2, 36, 38, 39, 1, 40, 41, 0, 0, 0,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 37, 58, 60, 61, 62, 19, 20,
	29, 27, 31, 30, 0, 21, 22, 23, 24, 25,
	28, 26, 35, 0, 34, 0, 32, 33, 67, 34,
	0, 32, 33, 13, 14, 0, 15, 0, 0, 0,
	72, 73, 74, 19, 20, 29, 27, 31, 30, 0,
	21, 22, 23, 24, 25, 28, 26, 35, 70, 34,
	66, 32, 33, 0, 0, 0, 19, 20, 29, 27,
	31, 30, 0, 21, 22, 23, 24, 25, 28, 26,
	35, 65, 34, 0, 32, 33, 0, 19, 20, 29,
	27, 31, 30, 0, 21, 22, 23, 24, 25, 28,
	26, 35, 0, 34, 0, 32, 33, 19, 20, 29,
	27, 31, 30, 0, 21, 22, 23, 24, 25, 28,
	26, 35, 43, 34, 64, 32, 33, 0, 19, 20,
	29, 27, 31, 30, 0, 21, 22, 23, 24, 25,
	28, 26, 35, 42, 34, 0, 32, 33, 0, 19,
	20, 29, 27, 31, 30, 0, 21, 22, 23, 24,
	25, 28, 26, 35, 0, 34, 0, 32, 33, 19,
	20, 29, 27, 31, 30, 0, 21, 22, 23, 24,
	25, 28, 26, 35, 0, 34, 0, 32, 33, 3,
	4, 0, 5, 8, 9, 10, 17, 9, 10, 0,
	0, 0, 0, 11, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 12, 0, 0, 12,
}

var yyPact = [...]int16{
	215, -1000, 59, -1000, 218, 218, -1000, 187, 0, -1000,
	-1000, 218, 218, -1000, 218, 218, 167, -1000, 146, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, -4, 218, 218, 218, 218, -6, 31, 125,
	105, 84, -1000, -1000, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, -1000, 26, -26,
	187, 61, 187, -10, -1000, -1000, -1000, -1000, -1000, 218,
	218, 218, 187, 31, 187,
}

var yyPgo = [...]int8{
	0, 14, 10, 0, 9, 8,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 5, 5, 4, 4,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 3, 2, 4, 4, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 4,
	4, 5, 0, 1, 3, 3, 5,
}

var yyChk = [...]int16{
	-1000, -1, -2, 4, 5, 7, -4, -3, 8, 9,
	10, 18, 28, 4, 5, 7, -3, 8, -3, 12,
	13, 19, 20, 21, 22, 23, 25, 15, 24, 14,
	17, 16, 30, 31, 28, 26, 11, 33, -3, -3,
	-3, -3, 6, 6, -3, -3, -3, -3, -3, -3,
	-3, -3, -3, -3, -3, -3, -3, 8, -3, -5,
	-3, -3, -3, 8, 29, 6, 6, 32, 29, 33,
	27, 11, -3, -3, -3,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 0, 0, 8, 9, 10, 11,
	12, 0, 0, 5, 0, 0, 0, 10, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0, 26, 0,
	0, 0, 3, 4, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 28, 0, 0,
	33, 0, 35, 0, 27, 6, 7, 29, 30, 0,
	0, 0, 34, 31, 36,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 23, 3, 3,
	28, 29, 21, 19, 33, 20, 30, 22, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 27, 3,
	25, 3, 24, 26, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 31, 3, 32,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:30
		{
			yylex.(*exprLex).result = yyVAL.NodeContent
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:32
		{
			yyVAL.NodeContent = &node.Content{bn(yylex), []node.Node{&node.Text{bn(yylex), yyDollar[1].string}}}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:33
		{
			yyVAL.NodeContent = &node.Content{bn(yylex), []node.Node{&node.Expression{bn(yylex), yyDollar[2].Node}}}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:34
		{
			yyVAL.NodeContent = &node.Content{bn(yylex), []node.Node{&node.RawExpression{bn(yylex), yyDollar[2].Node}}}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line text.y:35
		{
			yyDollar[1].NodeContent.Children = append(yyDollar[1].NodeContent.Children, &node.Text{bn(yylex), yyDollar[2].string})
			yyVAL.NodeContent = yyDollar[1].NodeContent
		}
	case 6:
		yyDollar = yyS[yypt-4 : yypt+1]
//line text.y:36
		{
			yyDollar[1].NodeContent.Children = append(yyDollar[1].NodeContent.Children, &node.Expression{bn(yylex), yyDollar[3].Node})
			yyVAL.NodeContent = yyDollar[1].NodeContent
		}
	case 7:
		yyDollar = yyS[yypt-4 : yypt+1]
//line text.y:37
		{
			yyDollar[1].NodeContent.Children = append(yyDollar[1].NodeContent.Children, &node.RawExpression{bn(yylex), yyDollar[3].Node})
			yyVAL.NodeContent = yyDollar[1].NodeContent
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:38
		{
			yyVAL.NodeContent = &node.Content{bn(yylex), []node.Node{yyDollar[1].Node}}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:39
		{
			yyVAL.NodeContent = &node.Content{bn(yylex), []node.Node{yyDollar[1].Node}}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:41
		{
			yyVAL.Node = &node.Variable{bn(yylex), yyDollar[1].string}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:42
		{
			yyVAL.Node = &node.String{bn(yylex), yyDollar[1].string}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:43
		{
			yyVAL.Node = &node.Number{bn(yylex), yyDollar[1].string}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:44
		{
			yyVAL.Node = &node.Operator{bn(yylex), "==", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:45
		{
			yyVAL.Node = &node.Operator{bn(yylex), "!=", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:46
		{
			yyVAL.Node = &node.Operator{bn(yylex), "+", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:47
		{
			yyVAL.Node = &node.Operator{bn(yylex), "-", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:48
		{
			yyVAL.Node = &node.Operator{bn(yylex), "*", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:49
		{
			yyVAL.Node = &node.Operator{bn(yylex), "/", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:50
		{
			yyVAL.Node = &node.Operator{bn(yylex), "%", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:51
		{
			yyVAL.Node = &node.Operator{bn(yylex), "<", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:52
		{
			yyVAL.Node = &node.Operator{bn(yylex), "<=", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:53
		{
			yyVAL.Node = &node.Operator{bn(yylex), ">", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:54
		{
			yyVAL.Node = &node.Operator{bn(yylex), ">=", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:55
		{
			yyVAL.Node = &node.Operator{bn(yylex), "&&", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:56
		{
			yyVAL.Node = &node.Operator{bn(yylex), "||", yyDollar[1].Node, yyDollar[3].Node}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line text.y:57
		{
			yyVAL.Node = &node.Operator{bn(yylex), "!", nil, yyDollar[2].Node}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:58
		{
			yyVAL.Node = &node.Parentheses{bn(yylex), yyDollar[2].Node}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:59
		{
			yyVAL.Node = &node.StructField{bn(yylex), yyDollar[1].Node, yyDollar[3].string}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line text.y:60
		{
			yyVAL.Node = &node.Indexed{bn(yylex), yyDollar[1].Node, yyDollar[3].Node}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line text.y:61
		{
			yyVAL.Node = &node.Function{bn(yylex), yyDollar[1].Node, yyDollar[3].NodeExpressionsList}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line text.y:62
		{
			yyVAL.Node = &node.TernaryIf{bn(yylex), yyDollar[1].Node, yyDollar[3].Node, yyDollar[5].Node}
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line text.y:64
		{
			yyVAL.NodeExpressionsList = &node.ExpressionsList{bn(yylex), nil}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line text.y:65
		{
			yyVAL.NodeExpressionsList = &node.ExpressionsList{bn(yylex), []node.Node{yyDollar[1].Node}}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:66
		{
			yyDollar[1].NodeExpressionsList.Values = append(yyDollar[1].NodeExpressionsList.Values, yyDollar[3].Node)
			yyVAL.NodeExpressionsList = yyDollar[1].NodeExpressionsList
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line text.y:68
		{
			yyVAL.Node = &node.Loop{bn(yylex), "", yyDollar[1].string, yyDollar[3].Node, nil}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line text.y:69
		{
			yyVAL.Node = &node.Loop{bn(yylex), yyDollar[1].string, yyDollar[3].string, yyDollar[5].Node, nil}
		}
	}
	goto yystack /* stack new state and value */
}
