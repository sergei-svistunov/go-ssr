// Code generated by github.com/sergei-svistunov/go-ssr. DO NOT EDIT.

package users

import (
	"context"
	"io"

	"github.com/sergei-svistunov/go-ssr/pkg/mux"
)

type RouteData struct {
	Users []User
}

type RouteDataProvider interface {
	GetRouteUsersData(ctx context.Context, r *mux.Request, w mux.ResponseWriter, data *RouteData) error
	GetRouteUsersDefaultSubRoute(ctx context.Context, r *mux.Request) (string, error)
}

type Route[DataProvider RouteDataProvider] struct{}

func (Route[DataProvider]) GetDataContext(ctx context.Context, r *mux.Request, w mux.ResponseWriter, dp DataProvider, child mux.DataContext) (mux.DataContext, error) {
	var (
		dataCtx = &dataContext{RouteDataContext: mux.RouteDataContext{
			Child: child,
			Assets: []string{
				"<script defer=\"defer\" src=\"/static/js/bootstrap.9e956bb5a71942fc3218.js\"></script>",
				"<script defer=\"defer\" src=\"/static/js/vendors.c44cd0e6d374429cb0f9.js\"></script>",
				"<script defer=\"defer\" src=\"/static/js/luxon.1ed077e024362cfc6deb.js\"></script>",
				"<link href=\"/static/css/pages/users.1794bf4ad6e6eacffefd.css\" rel=\"stylesheet\">",
				"<script defer=\"defer\" src=\"/static/js/pages/users.1794bf4ad6e6eacffefd.js\"></script>",
			},
		}}
	)
	if err := dp.GetRouteUsersData(ctx, r, w, &dataCtx.RouteData); err != nil {
		return nil, err
	}
	return dataCtx, nil
}

func (Route[DataProvider]) GetDefaultSubRoute(ctx context.Context, r *mux.Request, dp DataProvider) (string, error) {
	return dp.GetRouteUsersDefaultSubRoute(ctx, r)
}

type dataContext struct {
	mux.RouteDataContext
	RouteData
}

func (c *dataContext) Write(w io.Writer) error {
//line index.html:1
	users := c.RouteData.Users
	if _, err := w.Write(_mgpv1qts2rr01n9r2kijfts8bbcqpg4rifdjep91u3bgjflosbf0); err != nil {
		return err
	}
//line index.html:12
	for _, user := range users {
		if _, err := w.Write(_bi2hjs1pc3s4a4s0cn115jujn8kjcehrr3ppuvsao0n8m9tabi10); err != nil {
			return err
		}
//line index.html:13
		if _, err := mux.WriteHtmlEscaped(w, user.NavTabClass); err != nil {
			return err
		}
		if _, err := w.Write(_abqfj6andhh8alnn7ftvgs8c9klofcd31bs4vq0bpaecj078ad9g); err != nil {
			return err
		}
//line index.html:13
		if _, err := mux.WriteHtmlEscaped(w, user.Login); err != nil {
			return err
		}
		if _, err := w.Write(_lcmdet48ia9q0oam521uudg1jkg3li09sdb2shbhi1v9i6kec5og); err != nil {
			return err
		}
//line index.html:14
		if _, err := mux.WriteHtmlEscaped(w, user.Name); err != nil {
			return err
		}
		if _, err := w.Write(_e4l2hf89p8e0fh3m05a7tkt2e3v2q0um3glopqrmu3gntuq582bg); err != nil {
			return err
		}
	}
	if _, err := w.Write(_2k6u2a1flal4cjjmor8mjqplbf8o07glc6v96mvrrha2baqvq2vg); err != nil {
		return err
	}
	if c.Child != nil {
		err := c.Child.Write(w)
		if err != nil {
			return err
		}
	}
	if _, err := w.Write(_smo12i1qdhqmaeccb7egfbvjj2ktofgpa5etflom5ug259q76sa0); err != nil {
		return err
	}
	return nil
}

var (
	_2k6u2a1flal4cjjmor8mjqplbf8o07glc6v96mvrrha2baqvq2vg = []byte{
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76,
		0x3e, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6c, 0x2d, 0x6d,
		0x64, 0x2d, 0x38, 0x20, 0x63, 0x6f, 0x6c, 0x2d, 0x78, 0x6c, 0x2d, 0x31, 0x30, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	_abqfj6andhh8alnn7ftvgs8c9klofcd31bs4vq0bpaecj078ad9g = []byte{
		0x22, 0x20, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x65, 0x22, 0x20, 0x68, 0x72,
		0x65, 0x66, 0x3d, 0x22, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	}
	_bi2hjs1pc3s4a4s0cn115jujn8kjcehrr3ppuvsao0n8m9tabi10 = []byte{
		0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6e, 0x61, 0x76, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x3e, 0x0a, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
		0x6e, 0x61, 0x76, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
	}
	_e4l2hf89p8e0fh3m05a7tkt2e3v2q0um3glopqrmu3gntuq582bg = []byte{
		0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x6c, 0x69, 0x3e,
	}
	_lcmdet48ia9q0oam521uudg1jkg3li09sdb2shbhi1v9i6kec5og = []byte{
		0x22, 0x3e,
	}
	_mgpv1qts2rr01n9r2kijfts8bbcqpg4rifdjep91u3bgjflosbf0 = []byte{
		0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x72, 0x6f, 0x77, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6c, 0x2d, 0x6d, 0x64, 0x2d, 0x34, 0x20, 0x63, 0x6f, 0x6c,
		0x2d, 0x78, 0x6c, 0x2d, 0x32, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x2d, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0x3e, 0x0a,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x74, 0x2d, 0x33, 0x22,
		0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x55, 0x73, 0x65, 0x72, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x61, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22,
		0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x6e, 0x20, 0x62, 0x74, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x2d,
		0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x62, 0x74, 0x6e, 0x2d, 0x73, 0x6d, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x75,
		0x73, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x3c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x69, 0x20, 0x62, 0x69, 0x2d, 0x70, 0x65, 0x72, 0x73, 0x6f,
		0x6e, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x69, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6e, 0x61, 0x76, 0x20, 0x6e, 0x61, 0x76, 0x2d, 0x70,
		0x69, 0x6c, 0x6c, 0x73, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x2d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	_smo12i1qdhqmaeccb7egfbvjj2ktofgpa5etflom5ug259q76sa0 = []byte{
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76,
		0x20, 0x69, 0x64, 0x3d, 0x22, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
	}
)
